let g:pathogen_disabled = ['xptemplate']
call pathogen#infect()
call pathogen#helptags()

set mouse=a
syntax enable
set pastetoggle=<F3>
set t_Co=256
set number
set nofoldenable
set laststatus=2
set autoread
set scrolloff=3
set cul
set wildmenu
set wildmode=list:longest
set wildignore=.git,*.swp,*.jpg,*.png,*.gif,*app/cache/**,*app/logs/**
set visualbell
set clipboard=unnamed

" smoother plugins
set lazyredraw

" scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" dont save backups
set nobackup
set nowritebackup
set noswapfile

" Remap leader
let mapleader = ","

" search
set incsearch
set ignorecase
set smartcase
set hlsearch
set tags=tags;/
nmap <silent> ,/ :set hlsearch!<CR>

" indenting
set smartindent
set tabstop=4
set shiftwidth=4
filetype plugin indent on

" buffers
set autowrite
set hidden 

" Wipe out all buffers
nmap <silent> <Leader>wa :1,9000bwipeout<cr>

" Command mode
nnoremap ; :
vnoremap ; :
nnoremap <Leader>; ;
nnoremap <Leader>,; ,

" bindings
map <Leader>' :b#<CR>
map <C-C> "+y
map <Leader>M :%s/<C-V><C-M>//g<CR>
map <Leader>ff :let @+=expand('%:t')<CR>:echo expand('%:t')<CR>
map <Leader>fr :let @+=expand('%')<CR>:echo expand('%')<CR>
map <Leader>fp :let @+=expand('%:p')<CR>:echo expand('%:p')<CR>
map <Leader>sc <ESC>:Scratch<CR>

" unmap dangerous visual mode lowercase
vmap u <Nop>

" Edit common files
nmap <silent> <Leader>ev :e ~/dotfiles/vim/vimrc<CR>
nmap <silent> <Leader>sv :so ~/dotfiles/vim/vimrc<CR>
nmap <silent> <Leader>ssh :e ~/.ssh/config<CR>
nmap <silent> <Leader>bashp :e ~/.bash_profile<CR>
nmap <silent> <Leader>bashr :e ~/.bashrc<CR>
map <silent> <F3> <ESC>:e ~/dotfiles/todo.tasks<CR>

" dont auto insert comments
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" quickfix
map <Leader>qq <ESC>:cw<CR>
map <Leader>qc <ESC>:ccl<CR>
map <Leader>q] <ESC>:cn<CR>
map <Leader>q[ <ESC>:cp<CR>

" buffer nav
map <Leader>b[ <ESC>:bn<CR>
map <Leader>b] <ESC>:bn<CR>
map <Leader>w[ <ESC>:wp<CR>
map <Leader>w] <ESC>:wp<CR>

" marks
nnoremap ' `
nnoremap ` '

" wrap
map <Leader>rr <ESC>:set wrap!<CR>

" list whitespace
map <Leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬,trail:¤

" make up/down go to next row in editor instead of next line
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk

" sudo write this
cmap W! w !sudo tee % >/dev/null

"Markdown to HTML  
nmap <Leader>md :%!/usr/local/bin/Markdown.pl --html4tags <CR>

" Nerd Tree
map <F2> :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 25

" Nerd Commenter
let NERDCreateDefaultMappings = 0
nmap <Leader>c <Plug>NERDCommenterToggle
vmap <Leader>c <Plug>NERDCommenterToggle 

" Vim-Task
inoremap <silent> <Leader>tt <ESC>:call Toggle_task_status()<CR>i
noremap <silent> <Leader>tt :call Toggle_task_status()<CR>

" php folding with PHPDoc support
let g:DisableAutoPHPFolding = 1
map <F6> <Esc>:EnableFastPHPFolds<CR>

" taglist
map <F8> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" pdv - PHPDocumenter
imap <Leader>d <ESC>:call PhpDocSingle()<CR>i 
nmap <Leader>d :call PhpDocSingle()<CR> 
vmap <Leader>d :call PhpDocRange()<CR> 

" CtrlP
let g:ctrlp_root_markers = ['.root-dir']
let g:ctrlp_working_path_mode = 2
map <C-B> :CtrlPBuffer<CR>

" Syntastic
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes' : ['php'] }
let g:syntastic_auto_jump = 1
let g:syntastic_auto_loc_list = 1
let s:php_executable = 'php'

" Easy Motion
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade Comment

" Color Scheme
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized

" Text Manipulation
function! HtmlEscape()
	silent s/&/\&amp;/eg
	silent s/</\&lt;/eg
	silent s/>/\&gt;/eg
	silent s/“/\&ldquo;/eg
	silent s/”/\&rdquo;/eg
	silent s/™/\&trade;/eg
	silent s/®/\&reg;/eg
	silent s/©/\&copy;/eg
	silent s/‘/\&lsquo;/eg
	silent s/’/\&rsquo;/eg
	silent s/–/\&ndash;/eg
	silent s/—/\&mdash;/eg
endfunction

function! HtmlUnEscape()
	silent s/&amp;/\&/eg
	silent s/&lt;/</eg
	silent s/&gt;/>/eg
	silent s/&ldquo;/“/eg
	silent s/&rdquo;/”/eg
	silent s/&trade;/™/eg
	silent s/&reg;/®/eg
	silent s/&copy;/©/eg
	silent s/&lsquo;/‘/eg
	silent s/&rsquo;/’/eg
	silent s/&ndash;/–/eg
	silent s/&mdash;/—/eg
endfunction

nnoremap <silent> <Leader>h :call HtmlEscape()<CR>
nnoremap <silent> <Leader>H :call HtmlUnEscape()<CR>
vnoremap <silent> <Leader>h :call HtmlEscape()<CR>
vnoremap <silent> <Leader>H :call HtmlUnEscape()<CR>

" Autocompletion 
let g:SuperTabDefaultCompletionType = 'context'
"let g:SuperTabClosePreviewOnPopupClose = 1
set completeopt=longest,menuone,preview
autocmd FileType php set omnifunc=phpcomplete#CompletePHP

" if there were no arguments passed, open ctrlpmru
autocmd VimEnter * call VimEnterHandler()
function! VimEnterHandler()
	if empty(argv())
		:CtrlPMRU
	endif
endfunction

" VimWiki
let g:vimwiki_list = [{'path': $HOME.'/dotfiles/vim/wiki/', 'path_html': $HOME.'/dotfiles/vim/wiki/public_html/'}]

" attempt to get vim to use ctags settings to ensure php includes constant definitons and NOT inline variables
"let g:tagbar_type_php = {
	"\ 'ctagstype' : 'php',
	"\ 'ctagsargs' : '-x -R --exclude=.git --exclude=work --exclude=public_html/blog --exclude=public_html/assets/js --tag-relative=yes --regex-PHP="/abstract[ \t]+class[ \t]+([^ ]+)/\1/c/" --regex-PHP="/interface[ \t]+([^ ]+)/\1/c/" --regex-PHP="/const[ \t]+([^ \t=]+)/\1/d/" --regex-PHP="/(public[ \t]+|static[ \t]+|abstract[ \t]+|protected[ \t]+|private[ \t]+)function[ \t]+\&?[ \t]*([^ (]+)/\2/f/" --regex-PHP="/(public[ \t]+|static[ \t]+|abstract[ \t]+|protected[ \t]+|private[ \t]+)\$([^ (]+)/\2/m/" --PHP-kinds=+cfdm-v'
"\ }
